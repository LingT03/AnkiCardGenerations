{
  "deck_name": "Cloud Computing - Quiz 5",
  "cards": [
    {
      "question": "What is the primary role of the client in a client-server architecture?",
      "choices": [
        "security",
        "business logic",
        "user interaction",
        "data modeling"
      ],
      "correct_answer": "user interaction",
      "explanation": "In a client-server model, the client is mainly responsible for user-facing interactions, such as input and display."
    },
    {
      "question": "Which term refers to dividing an application into multiple layers or tiers?",
      "choices": [
        "standalone",
        "client-server",
        "load balancing",
        "n-tier layered"
      ],
      "correct_answer": "n-tier layered",
      "explanation": "N-tier layering separates an application into distinct layers (presentation, business logic, data access, etc.), improving maintainability and scalability."
    },
    {
      "question": "What does MTTF stand for in the context of availability?",
      "choices": [
        "Mean Time To Failure",
        "Mean Time To Fix",
        "Mean Time To Function",
        "Mean Time To Finish"
      ],
      "correct_answer": "Mean Time To Failure",
      "explanation": "MTTF (Mean Time To Failure) is the average time a system operates before failing, often used as a measure of reliability."
    },
    {
      "question": "What is the process of distributing tasks over resources according to a set of criteria called?",
      "choices": ["scaling", "load balancing", "elasticity", "auto scaling"],
      "correct_answer": "load balancing",
      "explanation": "Load balancing is the technique of efficiently distributing network or application traffic across multiple servers."
    },
    {
      "question": "Which load balancing algorithm distributes tasks equally among resources?",
      "choices": [
        "least connections",
        "source IP hash",
        "round robin",
        "least response time"
      ],
      "correct_answer": "round robin",
      "explanation": "Round robin cycles through each resource in order, effectively distributing tasks evenly in turn."
    },
    {
      "question": "Which load balancing algorithm distributes tasks based on the client's IP address?",
      "choices": [
        "least connections",
        "source IP hash",
        "round robin",
        "least response time"
      ],
      "correct_answer": "source IP hash",
      "explanation": "Source IP hash creates a unique hash of the client's IP and maps it to a specific server for consistent routing."
    },
    {
      "question": "Which load balancing algorithm prioritizes tasks based on the time taken to respond to requests?",
      "choices": [
        "least connections",
        "source IP hash",
        "round robin",
        "least response time"
      ],
      "correct_answer": "least response time",
      "explanation": "Least response time forwards requests to the server with the fastest response measurement, helping to reduce latency."
    },
    {
      "question": "Which load balancing algorithm distributes tasks based on the number of active connections each resource has?",
      "choices": [
        "least connections",
        "source IP hash",
        "round robin",
        "least response time"
      ],
      "correct_answer": "least connections",
      "explanation": "Least connections sends new requests to the resource currently handling the fewest active connections."
    },
    {
      "question": "What is the ability of a system to change in order to meet application demands called?",
      "choices": [
        "elasticity",
        "scalability",
        "load balancing",
        "availability"
      ],
      "correct_answer": "scalability",
      "explanation": "Scalability is the system's capacity to handle increasing workloads by adding resources, without impact to performance."
    },
    {
      "question": "Which type of auto scaling uses machine learning to predict demand?",
      "choices": ["scheduled", "dynamic", "predictive", "manual"],
      "correct_answer": "predictive",
      "explanation": "Predictive auto scaling anticipates future resource needs using historical data or ML models."
    },
    {
      "question": "Which type of auto scaling changes based on a pre-defined date/time setting?",
      "choices": ["scheduled", "dynamic", "predictive", "manual"],
      "correct_answer": "scheduled",
      "explanation": "Scheduled auto scaling uses specific date/time triggers to scale out or in, perfect for known peak/off-peak times."
    },
    {
      "question": "In the context of auto scaling, what does the parameter scale_in_cooldown set?",
      "choices": [
        "The target metric level",
        "A cooldown period after a scale-in activity",
        "A cooldown period after a scale-out activity",
        "The desired capacity"
      ],
      "correct_answer": "A cooldown period after a scale-in activity",
      "explanation": "scale_in_cooldown prevents immediate subsequent scaling actions, giving the system time to stabilize after shrinking capacity."
    },
    {
      "question": "Which type of load balancer can request new resources when sensing a demand increase?",
      "choices": [
        "Static load balancer",
        "Network load balancer",
        "Elastic load balancer",
        "DNS-based load balancer"
      ],
      "correct_answer": "Elastic load balancer",
      "explanation": "An elastic load balancer integrates with auto scaling to dynamically provision or decommission resources based on current demand."
    },
    {
      "question": "Which type of load balancer can be configured to perform name translations to targets based on a set of criteria?",
      "choices": [
        "Static load balancer",
        "Network load balancer",
        "Elastic load balancer",
        "DNS-based load balancer"
      ],
      "correct_answer": "DNS-based load balancer",
      "explanation": "DNS-based load balancers (e.g., AWS Route 53) use DNS responses to send clients to the appropriate server based on criteria like geo-location."
    },
    {
      "question": "What is the primary goal of dynamic load balancers?",
      "choices": [
        "To distribute tasks equally among resources",
        "To have real-time knowledge of the current load of each resource",
        "To operate at the transport level",
        "To perform name translations based on criteria"
      ],
      "correct_answer": "To have real-time knowledge of the current load of each resource",
      "explanation": "Dynamic load balancers continually monitor server loads, connections, or response times to make smarter routing decisions."
    },
    {
      "question": "What is serverless computing?",
      "choices": [
        "Computing without servers",
        "A model of computation where resources are automatically allocated by the cloud provider",
        "A type of physical server",
        "A local computing model"
      ],
      "correct_answer": "A model of computation where resources are automatically allocated by the cloud provider",
      "explanation": "Serverless computing abstracts away server management—resources are provisioned on demand by the cloud provider, so developers focus only on code."
    },
    {
      "question": "What is another term for serverless computing?",
      "choices": [
        "Infrastructure as a Service (IaaS)",
        "Platform as a Service (PaaS)",
        "Software as a Service (SaaS)",
        "Function as a Service (FaaS)"
      ],
      "correct_answer": "Function as a Service (FaaS)",
      "explanation": "Serverless architectures are often called FaaS because individual functions are deployed and run without managing servers."
    },
    {
      "question": "Which of the following is NOT an advantage of serverless computing?",
      "choices": [
        "No servers to manage",
        "Easy pricing based on executions and CPU time",
        "Maximum execution time limitations",
        "Automatic scaling"
      ],
      "correct_answer": "Maximum execution time limitations",
      "explanation": "Execution time limits (e.g., 15 minutes in AWS Lambda) are constraints, not benefits, making them a disadvantage."
    },
    {
      "question": "How are customers (normally) billed in serverless computing?",
      "choices": [
        "Monthly subscription",
        "During the time their code is executed",
        "Number of servers used",
        "Flat rate per function"
      ],
      "correct_answer": "During the time their code is executed",
      "explanation": "Billing is usage‑based—seconds of execution and resources consumed—rather than fixed server counts or flat subscriptions."
    },
    {
      "question": "What is a Lambda function?",
      "choices": [
        "A tiny function deployed in serverless computing",
        "A type of server",
        "A program language",
        "A cloud storage service"
      ],
      "correct_answer": "A tiny function deployed in serverless computing",
      "explanation": "AWS Lambda lets you run small, event‑driven functions without provisioning or managing servers."
    },
    {
      "question": "Which of the following is a disadvantage of serverless computing?",
      "choices": [
        "No servers to manage",
        "Easy pricing",
        "Automatic scaling",
        "Harder to test/debug"
      ],
      "correct_answer": "Harder to test/debug",
      "explanation": "Because infrastructure is abstracted away and functions are event‑driven, replicating the environment locally can be challenging for testing and debugging."
    },
    {
      "question": "What does synchronous invocation mean?",
      "choices": [
        "The callee waits for the response",
        "The callee doesn’t wait for the response",
        "The function is triggered by an event",
        "The function runs indefinitely"
      ],
      "correct_answer": "The callee waits for the response",
      "explanation": "With synchronous invocation, the caller blocks until the function finishes and returns a result."
    },
    {
      "question": "Which of the following is an example of a trigger for a Lambda function?",
      "choices": [
        "A scheduled event",
        "A new object uploaded to an S3 bucket",
        "An HTTP request from an API",
        "All of the above"
      ],
      "correct_answer": "All of the above",
      "explanation": "Lambda can be triggered by many sources, including scheduled events (CloudWatch), S3 object uploads, or API Gateway HTTP requests."
    },
    {
      "question": "What is the event object in serverless computing (in AWS)?",
      "choices": [
        "A JSON-formatted document containing data for a lambda function",
        "A physical server",
        "A programming language",
        "A cloud storage service"
      ],
      "correct_answer": "A JSON-formatted document containing data for a lambda function",
      "explanation": "When Lambda is invoked, AWS passes the triggering data as a JSON event object to the function handler."
    },
    {
      "question": "What is the current maximum execution time set by AWS for Lambda functions in minutes?",
      "choices": ["5", "10", "15", "30"],
      "correct_answer": "15",
      "explanation": "As of 2024, AWS Lambda allows a maximum execution timeout of 900 seconds (15 minutes) per invocation."
    }
  ]
}
